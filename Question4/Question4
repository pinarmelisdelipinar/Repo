a. The application and the dockerfile 
GIT contains a collection of files of various different versions of a Project. Therefore we need a priority 
project/app to create a git repository. 
A dockerfile is needed to run this application on a docker container.
Dockerfile → Docker Image → Docker Container
b. The Kubernetes manifests 
You specify the entire configuration of the environment you will install on Kubernetes in these files. 
Replication controller organizes your environment according to this file. 
Ex: https://github.com/GoogleCloudPlatform/microservices-demo/blob/main/release/kubernetesmanifests.yaml
c. Detailed instructions on how to build the application
 Create a new repository on Github (GitHub.com)
 Screenshot 1
 Create Demo directory in local 
 Create README.md file( you can think it like an app)
 Now we can push our code (i.e., upload our README.md file) to GitHub.com 
 Git commands to follow for this are as follows:
 Screenshot 2 & Screenshot 3
 The file can be viewed in the repo on github
 Screenshot 4
d. Detailed instructions on how to deploy the application
mkdir repository && cd repository
mkdir project.git && cd project.git
git init --bare
Screenshot 5
cd hooks
Screenshot 6
Let's create hook file:
touch prec
vi prec (open and add these lines) 
#!/bin/sh
git --work-tree=/var/www/domainadress.com --git-dir=~/repository/project.git checkout -f 
The above code works when a code is pushed to the git repo on the remote server. This is the prec hook. In 
the code block, we copy all the files in our git repo into our project under www. You can edit this path 
according to the location of your own project.
chmod +x prec
Now you can add a repository on the remote server as a new remote to the project from your own 
computer.
git remote add liveserver ssh:// user@ipAddress/~/repository/project.git
git push liveserver master
After running this code, you can now send your project from your own computer to the remote server with 
the command, and the remote server can copy your files to the right place using the commands in the prec 
hook.
e. Configuration files to bootstrap the testing environment
In some cases, when running tests, additional bootstrap work is required before running these tests. For 
example, if you're running a functional test and have introduced a new translation resource, then you will 
need to clear cache before running those tests.
tests/bootstrap.php file that is run by PHPUnit before tests.
+ if (isset($_ENV['BOOTSTRAP_CLEAR_CACHE_ENV'])) {
+ // executes the "php bin/console cache:clear" command
+ passthru(sprintf(
+ 'APP_ENV=%s php "%s/../bin/console" cache:clear --no-warmup',
+ $_ENV['BOOTSTRAP_CLEAR_CACHE_ENV'],
+ __DIR__
+ ));
+ }
After that this file is configured as bootstrap file in php unit file.
<!-- php unit file.->
<?xml version="1.0" encoding="UTF-8" ?>
<phpunit
 bootstrap="tests/bootstrap.php"
>
 <!-- ... -->
</phpunit>
Update php unit file to declare custom environment variable introduced to tests/bootstrap.php:
<!-- php unit file ->
<?xml version="1.0" encoding="UTF-8" ?>
<phpunit>
 <php>
 <env name="BOOTSTRAP_CLEAR_CACHE_ENV" value="test"/>
 <!-- ... -->
 </php>
 <!-- ... -->
</phpunit>
When running php unit file, the cache will be automatically cleared by the boot file before all tests are run.
